from collections import deque
 
def bfs():
    while deq:
        x, y = deq.popleft()
        for dx, dy in ((-1,0),(1,0),(0,-1),(0,1)):
            nx, ny = x + dx, y + dy
            if 0<= nx <n and 0<= ny <n: # 범위에 맞고
                if maze[nx][ny] == 0 or maze[nx][ny] == 'F': # 안지나간 길일 때 or 도착점일 때
                    deq.append((nx,ny))
                    maze[nx][ny] = maze[x][y] + 1  # 이전칸보다 1 증가 (경로갯수표시)
                # 제일먼저 도착점에 도달해서 값을 0 아닌 값으로 바꿨으면 그 이후에는 값이 안바뀔것임 -> 최소경로 구하기 가능
t = int(input())
for test_case in range(1, t+1):
    n = int(input()) # 미로크기
    maze = [list(map(int, input())) for _ in range(n)]
 
    # 시작점, 도착점 찾기
    for i in range(n):
        for j in range(n):
            if maze[i][j] == 2:
                sx, sy = i, j
            if maze[i][j] == 3:
                ex, ey = i, j
    # 경로가 3 이내일 수도 있기 때문에 경로 표시와 도착점 표시 헷갈리지 않도록 변경
    maze[ex][ey] = 'F'
    deq = deque([(sx, sy)])
    bfs()
 
    if maze[ex][ey] == 'F':
        result = 0
    else :
        result = maze[ex][ey]-3
 
    print(f'#{test_case} {result}')
